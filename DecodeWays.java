
public class DecodeWays 
{
    public static int numDecodings(String s) 
    {
    	if(s==null || s.length()==0 || Character.getNumericValue(s.charAt(0))==0) return 0;
    	if(s.length()==1) return 1;
    	if(s.length()==2)
    	{
    		int a=Integer.parseInt(s);
    		if(Character.getNumericValue(s.charAt(1))==0)
    		{
    			if(Character.getNumericValue(s.charAt(0))>2) return 0;
    			else return 1;
    		}
    		else
    		{
    			if(a<=26) return 2;
    			else return 1;
    		}
    	}
    	int[] check=new int[s.length()-2];
    	for(int i=2;i<s.length();i++) check[i-2]=0;
    	if(Character.getNumericValue(s.charAt(2))==0)
    	{
    		if(Character.getNumericValue(s.charAt(1))==0 || Character.getNumericValue(s.charAt(1))>2)
    			return 0;
    		else check[0]=1;
    	}
    	else check[0]=3;
    	
    	
    	for(int i=1;i<s.length()-2;i++)
    	{
    		int a=Character.getNumericValue(s.charAt(i+2));
    		int b=Character.getNumericValue(s.charAt(i+1));
    		int d=Character.getNumericValue(s.charAt(i));
    		int c1=Integer.parseInt(s.substring(i+1,i+3));
    		int c2=Integer.parseInt(s.substring(i,i+2));
//    		System.out.println(b+""+a+" "+c1);
    		if(a==0)
    		{
    			if(b>2 || b==0) return 0;
    			else
    			{
    				check[i]=check[i-1]-1;
    			}
    		}
    		else
    		{
    			if(c1>26)
    			{
    				check[i]=check[i-1];
    			}
    			else
    			{
    				if(i>=2)
    				{
	    				if(b==0)
	    				{
	    					check[i]=check[i-1];
	    				}
	    				else
	    				{
	    					if(d==0 || c2>26) check[i]=check[i-1]+1;
	    					else check[i]=check[i-2]+2;
	    				}
    				}
    				else check[i]=check[i-1]+1;
    					
    			}
    		}
    	}
    	System.out.println(check[0]+""+check[1]);//+""+check[2]+""+check[3]);
    	return check[s.length()-3];
    }
	
	public static void main(String[] args) 
	{
		String s1;
//		s
//		s1="6065812287883668764831544958683283296479682877898293612168136334983851946827579555449329483852397155";
//		s1="4757562545844617494555774581341211511296816786586787755257741178599337186486723247528324612117156948";
		s1="1010101010";
		System.out.println(numDecodings(s1));
	}
}